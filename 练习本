练习本

浏览器缓存方式：
1、cookie
2、webstorage
3、mainfest
4、pwa(service worker的cachestorage)
5、indexdb

服务器缓存
cache-control/expies 控制缓存多久，f5刷新无效
Etag/Last-Modified，强刷无效

CDN缓存
combo

缓存策略：
对于比较稳定的资源，设置差不多一年的cache-control，然后设置Etag，如果有变动，则通过资源添加search字段更新

优化
编码阶段：
css放在头部
尽量少用耗性能的css属性
避免使用import引入css
精简css，避免过多嵌套，使用简写语法
动画开启3d加速
变化频繁的层考虑绝对定位提高层
iconfont
media query

js放在脚部
合并操作，文档胶囊
事件代理
数据缓存，增量更新
首屏展示
模块按需加载
缓存耗性能操作结果
非首屏脚本defer或者async
触发频繁的时间做节流或者防抖动
ajax能get的话尽量get，可缓存
css in js
偏阅读网站用amp加速
享元模式优化创建对象

图片格式选择，优先webp、png8
精灵图
图片定义宽高，避免实际宽高和展示宽高不一致
按需加载，提供展位图
先模糊再清晰
预加载
base64处理不适合精灵图的资源

精简html结构
表格的fixed
防止重定向
srcset移动端图片
动态gif视频化

构建阶段：
iconfont自动化
精灵图自动化
资源压缩
webpack tree sharking
提取公用样式，页面
js-lint

部署阶段：
图片多域
gzip
设置缓存
提供404等异常页面
压力测试
性能分析

hybrid：
原生团队考虑扩展http协议头
提供离线包方案
更新预先推送
