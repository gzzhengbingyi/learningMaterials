练习本

co的简单实现
co是generator的遍历器
首先，generator的next机制要先搞懂。
yield
...
yield
第一次调用next，其实是运行next后面的语句，而该语句运行结果并不是像普通语句那样可以直接赋值的，其实next后，会返回一个对象{value: xxx, done: false}给外面调用next的语句，而generator里面返回的却是undefined。调用下一个next，其实就是运行第一个yield到下一个yield之间的逻辑，如果有传入参数，相当于将原来的undefined替换成参数

因此co的实现可以这样来

funtion co(fn){
	return function(done){
		let ctx = this;
		let fn = fn.call(ctx);
		let it = null;

		function _next(err, res){
			if(err) res = err;//第二次next的时候，其实就是回调函数返回异步的结果，然后用next赋值
			it = fn.next(res);//value是thunk函数(新的版本是promise)
			if(!it.done){
				it.value(_next) //相当于_next为回调函数，其实没有co的话，就是靠回调运行next的
			}
		}

		_next()
	}
}