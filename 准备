# 准备

## 基础知识

### 跨域

#### 1. 定义
同源策略规定不能加载协议或域名或端口不一致源的资源，而跨域刚好相反，就是要获取这些资源。

#### 2.实现

**[1]** 兄弟域名之间，设置`domain`为父域名，则可以共享 cookie 等资源

**[2]** iframe 跨域

a、onhashchange，父窗口以及 iframe 窗口通过监听hash的变化来传递信息。缺点：1. IE6、7不支持 onhashchange 2. hash 变化太快的话，有可能漏掉信息，因此要做一个100ms的延迟

b、window.name 通信，iframe 通过 window.name 设置通信数据，然后跳转到父窗口的域下页面，然后同域名通信。缺点：一次性使用

c、html5 新出的`window.postMessage`，根据`event.origin`来保证只对特定域名来源生效

**[3]** JSONP 通信，同源策略并不阻止js的获取，因此通过将回调函数名附带在链接后，服务端将数据塞到函数名内，返回的文件以js的形式解析

**[3]** CORS协议，通过白名单设置信赖来源（`Access-Control-Allow-Origin`）

**[4]** 服务器反向代理

**[5]** websocket 与服务器通信 

	

### 缓存

#### 1.缓存的形式
**[1]** `Expires`/`Cache-Control`，`Last-Modified`(`If-Modified-Since`)/`ETag`(`If-None-Match`)

**[2]** CDN 缓存以及 CDN Combo，CDN有对应的操作平台可以更新，或者对应的命令行更新，可以实现资源的推送以及清理缓存之类的操作

**[3]** `manifest`离线缓存，缺点：1. 更新的资源要二次刷新才能用 2.不支持增量更新，变化后资源全部重新下载 3.缺乏容错机制

**[4]** WindowStorage 缓存，不足就是存储的数据会变成字符串

**[5]** PWA 的`Service Worker`中`cacheStorage`（installing → installed → activating → activated），具体待实践

**[6]** IndexDB 缓存

### cookie

#### 1.不足
**[1]** 数量以及长度的限制
**[2]** 安全性问题，别人可以获取 cookie


### http协议

### 正则

### JS的一些特性（原型链、闭包等等）

### DOM

### 事件

### ajax

### 优化

### 安全（XSS、CSRF等）

### CSS应用

### 手写代码

### 项目经验

## 针对

### web动画

#### 1.形式

**[1]** gif/apng

**[2]** css3 animation

**[3]** canvas

**[4]** svg

**[5]** webgl

**[6]** 纯`js`动画，配合`requestAnimationFrame`使用

#### 2.js动画优化

**[1]** 避免频繁的 reflow

**[2]** 减少大面积的 paint

**[3]** 优化js性能，例如缓存一些耗性能操作的结果，例如合并操作，例如内存操作dom（documentFragment）

**[4]** 避免在动画过程中做高耗时操作，或者放在动画开头或者结尾处，又或者分摊到每一帧

**[5]** 高昂开销，尝试用 CSS3 的变换完成


### 响应式布局

### hybrid

#### 1. JSBridge 的原理及实现

**[1]** webview 调用 js，IOS：`stringByEvaluatingJavaScriptFromString()` , Android：`loadUrl()`

**[2]** js 调用 native，1、 url scheme（目前兼容性更加好）  2、webview 提供一个 api 接口（未来的趋势）

**[3]** url scheme 的缺点是连续多次修改 href，webview 只能接收到最后一次的，因此，可以采用 iframe 加载 url scheme 的形式

**[4]** url scheme 后面加上 eventName 以及处理过的 data（含 event ID）

### webview 性能优化

#### 1. webview 很慢的原因

**[1]** 初始化 webview 就花费了不少时间，后面的操作都被阻塞了。解决方案：1、客户端一开始就创建一个隐藏的 webview ，用的时候直接打开。缺点：a、占用内存 b、有可能会出现内存泄露； 2、在初始化的时候，native 代理请求资源，初始化好后直接从 native 获取资源

**[2]** DNS 时间消耗，建议 webview 资源域名与 native 资源域名一致

**[3]** HTTP 请求的 chunk 编码，`transfer-encoding: chunked`，优先输出一些确定的编码

**[4]** 防止关键渲染过程中的阻塞，如 CSS 阻塞了内联函数的解析，可以考虑交换两者位置，考虑避免 js 运行阻塞 html 的解析，将非首屏资源懒加载

**[5]** 手机的 CPU 提高不大，即使网络快了很多，js 的解析也会很慢，因此采取服务端渲染很重要，平常 ftl 就够了，缺点是组件不够独立，考虑同构。尽量避免重型框架，如简单的 zepto 够用的话，就用它好了。尽量统一框架，利用缓存。滑动区间尽量不要操作，touchmove 后再执行，如 sticky 的安卓实现

**[6]** 防止崩了，例如加载超过 2MB 的图片有可能会出现崩的情况

**[7]** 安全问题，如 CSP 的设置，已经 HTTPS 协议，以及改用 socket 请求

**[8]** 打开外链选择白名单机制，并提供一些明显的提示给用户 

### HTTP 以及 HTTPS 等网络协议

### 调试