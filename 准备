# 准备

## 基础知识

### 跨域

#### 1. 定义
同源策略规定不能加载协议或域名或端口不一致源的资源，而跨域刚好相反，就是要获取这些资源。

#### 2.实现

**[1]** 兄弟域名之间，设置`domain`为父域名，则可以共享 cookie 等资源

**[2]** iframe 跨域

a、onhashchange，父窗口以及 iframe 窗口通过监听hash的变化来传递信息。缺点：1. IE6、7不支持 onhashchange 2. hash 变化太快的话，有可能漏掉信息，因此要做一个100ms的延迟

b、window.name 通信，iframe 通过 window.name 设置通信数据，然后跳转到父窗口的域下页面，然后同域名通信。缺点：一次性使用

c、html5 新出的`window.postMessage`，根据`event.origin`来保证只对特定域名来源生效

**[3]** JSONP 通信，同源策略并不阻止js的获取，因此通过将回调函数名附带在链接后，服务端将数据塞到函数名内，返回的文件以js的形式解析

**[3]** CORS协议，通过白名单设置信赖来源（`Access-Control-Allow-Origin`）

**[4]** 服务器反向代理

**[5]** websocket 与服务器通信 

	

### 缓存

#### 1.缓存的形式
**[1]** `Expires`/`Cache-Control`，`Last-Modified`(`If-Modified-Since`)/`ETag`(`If-None-Match`)

**[2]** CDN 缓存以及 CDN Combo，CDN有对应的操作平台可以更新，或者对应的命令行更新，可以实现资源的推送以及清理缓存之类的操作

**[3]** `manifest`离线缓存，缺点：1. 更新的资源要二次刷新才能用 2.不支持增量更新，变化后资源全部重新下载 3.缺乏容错机制

**[4]** WindowStorage 缓存，不足就是存储的数据会变成字符串

**[5]** PWA 的`Service Worker`中`cacheStorage`（installing → installed → activating → activated），具体待实践

**[6]** IndexDB 缓存

### cookie

#### 1.不足
**[1]** 数量以及长度的限制
**[2]** 安全性问题，别人可以获取 cookie


### http协议

### 正则

### JS的一些特性（原型链、闭包等等）

### DOM

### 事件

### ajax

```
var callback = function(res){
}
var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function(){
	if(xhr.readyState === 4){
		if((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304)){
			callback(xhr.responseText)
		} else{
		}
	}
}
xhr.open('get','xxx.json')
xhr.setRequestHeader("myHeader", "myValue");
xhr.send(null);
```

### 优化

### OOP

```
类继承
function classA(){
}
classA.method = function(){
}
classA.prototype.api = function(){
}

function classB(){
	classA.apply(this, arguments) //调用constructor方法，注意不是new，所以不是classA的实例
}
classB.prototype = new ClassA(); //假如是classA的prototype，就不能重写一些方法了
classB.prototype.constuctor = classB; //这个关系的一定的，不重写这里就是classA了.构造器属性是构造函数自身的
classB.prototype.api = function(){
	classA.prototype.api.apply(this, arguments)
}


原型继承
var proto = {
	action1: function(){},
	action2: function(){}
}
var obj = Object.create(proto)

旧版的实现就是
Object.create = Object.create || function(obj){
	var F = fucntion(){}
	F.prototype = obj; //通过new返回能隔离一层，用于重写
	return new F();
}
```

### CSS应用

#### 1. 水平居中

```
html:

<div class="parent">
	<div class="child"></div>
</div>

css:

.parent{
	text-align: center;
}

.child{
	display: inline-block;
}
```

```
html:

<div class="parent">
	<div class="child"></div>
</div>

css:

.child{
	display: table;
	margin: 0 auto;
}
```

```
html:

<div class="parent">
	<div class="child"></div>
</div>

css:

.parent{
	position: relative;
}

.child{
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}
```

```
html:

<div class="parent">
	<div class="child"></div>
</div>

css:

.parent{
	display: flex;
	justifiy-content: center;
}

------

.parent{
	display: flex;
}

.child{
	margin: 0 auto;
}
```

#### 2. 垂直居中

```
html:

<div class="parent">
	<div class="child"></div>
</div>

css:

.parent{
	display: table-cell;
	vertical-align: middle;
}
```


```
html:

<div class="parent">
	<div class="child"></div>
</div>

css:

.parent{
	position: relative;
}

.child{
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}
```


```
html:

<div class="parent">
	<div class="child"></div>
</div>

css:

.parent{
	display: flex;
	align-items: center;
}
```

#### 3. 垂直水平居中


```
html:

<div class="parent">
	<div class="child"></div>
</div>

css:

.parent{
	text-align: center;
	display: table-cell;
	vertical-align: middle;
}

.child{
	display: inline-block;
}
```


```
html:

<div class="parent">
	<div class="child"></div>
</div>

css:

.parent{
	position: relative;
}

.child{
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}
```

```
html:

<div class="parent">
	<div class="child"></div>
</div>

css:

.parent{
	display: flex;
	justify-content: center;
	align-items: center;
}
```

### 手写代码

### 项目经验

## 针对

### web动画

#### 1.形式

**[1]** gif/apng

**[2]** css3 animation

**[3]** canvas

**[4]** svg

**[5]** webgl

**[6]** 纯`js`动画，配合`requestAnimationFrame`使用

#### 2.js动画优化

**[1]** 避免频繁的 reflow

**[2]** 减少大面积的 paint

**[3]** 优化js性能，例如缓存一些耗性能操作的结果，例如合并操作，例如内存操作dom（documentFragment）

**[4]** 避免在动画过程中做高耗时操作，或者放在动画开头或者结尾处，又或者分摊到每一帧

**[5]** 高昂开销，尝试用 CSS3 的变换完成


### 响应式布局

#### 1. 横竖屏判断

```
横屏

@media screen and (orientation: landscape){
}

<link ref="stylesheet" media="all and (orientation: landscape)" href="xx.css">

竖屏

@media screen and (orientation: portrait){
}

<link ref="stylesheet" media="all and (orientation: portrait)" href="xx.css">

window.addEventListener("onorientationchange" in window ? "orientationchange" : "resize", function(){
	//横屏，根据和水平线的角度来区分
	if(Math.abs(window.orientation) === 90){
	
	}
	//竖屏
	if(window.orientation === 180 || window.orientation === 0){
	
	}
})
```

#### 2. 普通响应式写法

```
@media (max-width: 600px){
}

<link rel="stylesheet" media="(max-width: 600px)" href="xxx.css"/>

@media tv and (min-width: 700px ) and (orientation: landscape){
}
```

### hybrid

#### 1. JSBridge 的原理及实现

**[1]** webview 调用 js，IOS：`stringByEvaluatingJavaScriptFromString()` , Android：`loadUrl()`

**[2]** js 调用 native，1、 url scheme（目前兼容性更加好）  2、webview 提供一个 api 接口（未来的趋势）

**[3]** url scheme 的缺点是连续多次修改 href，webview 只能接收到最后一次的，因此，可以采用 iframe 加载 url scheme 的形式

**[4]** url scheme 后面加上 eventName 以及处理过的 data（含 event ID）

### webview 性能优化

#### 1. webview 很慢的原因

**[1]** 初始化 webview 就花费了不少时间，后面的操作都被阻塞了。解决方案：1、客户端一开始就创建一个隐藏的 webview ，用的时候直接打开。缺点：a、占用内存 b、有可能会出现内存泄露； 2、在初始化的时候，native 代理请求资源，初始化好后直接从 native 获取资源

**[2]** DNS 时间消耗，建议 webview 资源域名与 native 资源域名一致

**[3]** HTTP 请求的 chunk 编码，`transfer-encoding: chunked`，优先输出一些确定的编码

**[4]** 防止关键渲染过程中的阻塞，如 CSS 阻塞了内联函数的解析，可以考虑交换两者位置，考虑避免 js 运行阻塞 html 的解析，将非首屏资源懒加载

**[5]** 手机的 CPU 提高不大，即使网络快了很多，js 的解析也会很慢，因此采取服务端渲染很重要，平常 ftl 就够了，缺点是组件不够独立，考虑同构。尽量避免重型框架，如简单的 zepto 够用的话，就用它好了。尽量统一框架，利用缓存。滑动区间尽量不要操作，touchmove 后再执行，如 sticky 的安卓实现

**[6]** 防止崩了，例如加载超过 2MB 的图片有可能会出现崩的情况

**[7]** 安全问题，如 CSP 的设置，已经 HTTPS 协议，以及改用 socket 请求

**[8]** 打开外链选择白名单机制，并提供一些明显的提示给用户 

### HTTP 以及 HTTPS 等网络协议

#### 1. HTTP 介绍

超文本传输协议，是从 Web 服务器传输文件到本地浏览器的通信协议，是 TCP/IP 协议组应用层的实现。

**request消息结构：**

**[1]** request line

**[2]** request header

**[3]** header 与 body 之间的空行

![cmd-markdown-logo](https://pic1.zhimg.com/80/v2-f718f80a2b288ca087d18b34b4120298_hd.jpg)


**response消息结构：**

**[1]** response line

**[2]** response header

**[3]** response 与 body 之间的空行

![cmd-markdown-logo](https://pic1.zhimg.com/80/v2-4af35fa7f749b86971181c472c151770_hd.jpg)

#### 2. HTTP 请求类型

**[1]** GET

**[2]** POST

**[3]** PUT，主体部分存储在服务器

**[4]** DELETE

**[5]** TRACE，对可能经过代理服务器传送的报文进行跟踪

**[6]** OPTIONS，决定可以在服务器上执行哪些方法

**[7]** HEADER，获取文档首部

**[8]** CONNECT，将请求转换到透明的 TCP/IP 通道

#### 3. GET 和 POST 的区别

**[1]** GET 的数据放在URL后面，通过 ？分割，POST 的数据放在 body 里面

**[2]** 因为浏览器限制，URL 有长度限制，而 POST 没有

**[3]** GET 的数据通过`Request.queryString`获取，POST 通过`Request.Form`获取

**[4]** GET 数据有安全性问题，可以从历史记录获取，或者变成书签

**[5]** GET 的数据可以缓存，而 POST 不行

**[6]** 编码类型可能不一样，GET 是`application/x-www-form-urlencoded` ，POST 除了这个外，还可能是`multipart/form-data`等

#### 4. HTTP 码

200，成功

204，成功但不返回

206，成功但返回一部分

301，永久重定向

302，临时重定向

303，临时重定向，要求是 get

304，不改变

307，临时重定向，要求 post

400，语法错误

401，未授权

403，拒绝服务

404，找不到资源

500，服务端错误

503，暂时响应不过来

#### 5. HTTP 版本区别以及 SPDY

**[1]** HTTP 1.1 和 HTTP 1.0 区别：

1、更多的缓存头 

2、引入range头，实现带宽优化，如返回资源某部分 

3、增加错误码 

4、HOST 头处理 

5、`Connection: keep-alive`长链接

**[2]** SPDY 和 HTTP 1.1 的区别

1、多路复用

2、压缩头部

3、请求优先级设置

4、服务端推送

5、开启 HTTPS

**[3]** SPDY 和 HTTP 2.0 的区别

1、HTTP 2.0 是明文传输

2、HTTP 2.0 消息头压缩算法和 SPDY 不一样

### 调试

#### 1. 调试的手段

**[1]** IOS 在 safari 设置里面开启调试，然后 USB 连接电脑，再在 PC safari 上打开真机调试； Android 在开发者选项中开启设置，然后 USB 连接电脑，在 PC chrome 上开启调试设置

**[2]** weinre，需要安装 nodejs，在移动端浏览器修改书签内容为 weinre 的代码后保存，访问调试页面后，点击书签

**[3]** 微信调试，使用微信提供的开发者工具有真机调试选项

### 安全

#### 1. 有哪些前端攻击

**[1]** XSS，运行恶意代码注入到页面上，使用户使用时受到影响

防御手段：

1、前后端对获取的数据来源进行特殊字符串转义

2、对存储的数据进行转义

3、开启 CSP 防止恶意代码加载其他资源

**[2]** CSRF 跨站脚本攻击，挟制用户在已登录页面进行非本意操作

防御手段：

1、防止长时间 session 不过期

2、增加 referer 字段检查

3、增加页面 token

4、敏感操作验证码

**[3]** SQL 注入，提交 SQL 到表达或者查询字段

防御手段：

1、转义特殊字符

2、不要动态拼装字符

**[4]** DDos 攻击，挟制用户进行合法或者非法访问页面

防御手段：

1、增加带宽

2、查封 IP

3、硬件防火墙

4、高性能设备

5、负载均衡

**[5]** SYN 虚拟 IP 占用服务器确认资源

防御手段：

1、缩短超时

2、增加最大半连接数

3、过滤网关保护

**[6]** HTTPS 劫持，中间人劫持 TCP/IP 请求，获取页面内容后，修改下次访问为 HTTP

防御手段：

1、HSTS，强制访问后就一直是HTTPS请求

2、后端 chunk 输出内容，增加修改页面难度

3、JavaScript 探针，发现页面不是 HTTPS 协议的话，清除缓存并跳转到安全链接

#### 2. CSP 介绍

附加的安全层，帮助检测和缓解某些类型的攻击，包括XSS和数据注入。

实现：

1、`Content-Security-Policy:`设置白名单

### 数据变更检测以及虚拟 DOM 原理

#### 1. 脏检测

```
HTML
<input qg-event="value" qg-bind="value" type="text" id="input">
<span qg-event="text" qg-bind="value" id="el"></span>

JS
let elems = [byId("el"), byId("input")];
let data = {
	value: "hello"
}

let directive = {
	text: function(text){
		this.innerHTML = text
	},
	value: function(value){
		this.setAttribute('value', value)
	}
}

function san(elems){
	for(let elem of elems){
		elem.direactive = []
	}
}

elems[1].addEventListener("keyup", function(e){
	data.value = e.target.value;
	$digest(e.target.getAttribute("qg-bind")); //bind定的参数
})

function $degest(value){
	let list = querySelectorAll('[qg-bind=' + value + '']');
	digest(list)
}

function digest(elems){
	for(let i = 0, len = elems.length; i < len; i++){
		let elem = elems[i];
		for(let j = 0, len1 = elem.attributes.length; j < len1;j++){
			let attr = elem.attributes[j];
			if(attr.nodeName.indexOf("qg-event") >= 0){
				let datakey = elem.getAtrribute("qg-bind") || undefine;
				if(elem.directive[attr.nodeValue] !== data[datakey]){
					directive[attr.nodeValue].call(elem, data[datakey]);
					elem.directive(attr.nodeValue) = data[datakey]
				}
			}
		}
	}
}
```

#### 2. 数据劫持，defineObjectProperty

```
let bValue;
function defineGetAndSet(obj, propName){
	Object.defineProperty(obj, propName){
		get: function(){
			return bValue;
		},
		set: function(newValue){
			bValue = newValue;
			scan();
		},
		enumerable: true, //enumerable定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。

		configurable: true //configurable特性表示对象的属性是否可以被删除，以及除writable特性外的其他特性是否可以被修改。
	}
}

function scan(){
	for(let elem of elems){
		elem.directive = [];
		for(let attr of elem.attributes){
			if(attr.nodeName.indexOf("q-")){
				directive[attr.nodeName.slice(2)].call(elem, 				data[attr.nodeValue]);
				elem.directive.push(attr.nodeName.slice(2))
			}
		}
	}
}

elems[1].addEventlistner(keyup){
	data.value = e.target.value
}
defineGetAndSet(data, "value");
```

#### 3. ES6 的 Proxy

```
let data = new Proxy({}, {
	get: function(target, key, receiver){
		return target.value
	},
	set: function(target, key, value, recevier){
		target.value = value;
		scan();
		return target.value;
	}
})

data["value"] = "hello"
```

#### 4. 虚拟 dom 原理

先生存 AST 抽象语法树，dom 变化是进行多叉树结构遍历，默认进行同级元素进行对比，通过绑定 key 来实现插入或者移动操作，避免同级元素对比时候销毁并创建原有节点。

### 手写 Promise 的实现

```
unction Promise(executor){
	var self = this;

	self.status = "pending";
	self.onResolvedCallback = [];
	self.onRejectedCallback = [];

	function resolve(value){
		if(value instanceof Promise){
			return value.then(resolve, reject)
		}
		setTimeout(function(){
			if(self.status === 'pending'){
				self.status = 'resolved';
				self.data = value;
				for(var i = 0; i < self.onResolvedCallback.length; i++){
					self.onResolvedCallback[i](value)
				}
			}
		})
	}

	function reject(reason){
		setTimeout(function(){
			if(self.status === 'pending'){
				self.status = 'rejected';
				self.data = reason;
				for(var i = 0; i < self.onRejectedCallback.length; i++){
					self.onRejectedCallback[i](reason)
				}
			}
		}）
	}

	try{
		executor(resolve, reject);
	} catch(e){
		reject(e)
	}
}

//resolvePromise函数即为根据x的值来决定promise2的状态的函数
function resolvePromise(promise2, x, resolve, reject){
	var then
	var thenCalledOrThrow = false;

	if(promise2 === x){
		return rejecte(new TypeError('Chaining cycle detected for promise!'))
	}

	if(x instanceof Promise){
		if(x.status === 'pending'){
			x.then(function(v){
				resolvePromise(promise2, v, resolve, reject)
			}, reject)
		} else{
			x.then(resolve, reject)
		}
		return
	}

	//不同实现的promise也可以保证能够互相调用
	if((x !=== null) && ((typeof x === "object") || typeof x === "function")){
		try{
			then = x.then;
			if(typeof then === "function"){
				then.call(x, function rs(y){
					if(thenCalledOrThrow) return
					thenCalledOrThrow = true
					return resolvePromise(promise2, y, resolve, reject)
				}, function rj(r){
					if(thenCalledOrThrow) return
					thenCalledOrThrow = true
					return reject(r)
				})
			} else{
				resolve(x)
			}
		} catch(e){
			if(thenCalledOrThrow) return
			thenCalledOrThrow = true
			return reject(e)
		}
	} else{
		resolve(x)
	}
}

Promise.prototype.then = function(onResolved, onRejected) {
  var self = this
  var promise2

  // 根据标准，如果then的参数不是function，则我们需要忽略它，此处以如下方式处理
  onResolved = typeof onResolved === 'function' ? onResolved : function(value) {}
  onRejected = typeof onRejected === 'function' ? onRejected : function(reason) {}

  if (self.status === 'resolved') {
    // 如果promise1(此处即为this/self)的状态已经确定并且是resolved，我们调用onResolved
    // 因为考虑到有可能throw，所以我们将其包在try/catch块里
    return promise2 = new Promise(function(resolve, reject) {
      try {
        var x = onResolved(self.data)
        if (x instanceof Promise) { // 如果onResolved的返回值是一个Promise对象，直接取它的结果做为promise2的结果
          x.then(resolve, reject)
        }
        resolve(x) // 否则，以它的返回值做为promise2的结果
      } catch (e) {
        reject(e) // 如果出错，以捕获到的错误做为promise2的结果
      }
    })
  }

  // 此处与前一个if块的逻辑几乎相同，区别在于所调用的是onRejected函数，就不再做过多解释
  if (self.status === 'rejected') {
    return promise2 = new Promise(function(resolve, reject) {
      try {
        var x = onRejected(self.data)
        if (x instanceof Promise) {
          x.then(resolve, reject)
        }
      } catch (e) {
        reject(e)
      }
    })
  }

  if (self.status === 'pending') {
  // 如果当前的Promise还处于pending状态，我们并不能确定调用onResolved还是onRejected，
  // 只能等到Promise的状态确定后，才能确实如何处理。
  // 所以我们需要把我们的**两种情况**的处理逻辑做为callback放入promise1(此处即this/self)的回调数组里
  // 逻辑本身跟第一个if块内的几乎一致，此处不做过多解释
    return promise2 = new Promise(function(resolve, reject) {
      self.onResolvedCallback.push(function(value) {
        try {
          var x = onResolved(self.data)
          if (x instanceof Promise) {
            x.then(resolve, reject)
          }
        } catch (e) {
          reject(e)
        }
      })

      self.onRejectedCallback.push(function(reason) {
        try {
          var x = onRejected(self.data)
          if (x instanceof Promise) {
            x.then(resolve, reject)
          }
        } catch (e) {
          reject(e)
        }
      })
    })
  }
}

// 为了下文方便，我们顺便实现一个catch方法
Promise.prototype.catch = function(onRejected) {
  return this.then(null, onRejected)
}

Promise.prototype.catch = function(onRejected){
	return this.then(null, onRejected)
}

Promise.deferred = Promise.defer = function(){
	var dfd = {}
	dfd.promise = new Promise(function(resolve, reject){
		dfd.resolve = resolve
		dfd.reject = reject
	})
	return dfd
}

Promise.cancel = Promise.stop = function() {
  	return new Promise(function(){})
}
```

### co 的简单实现

```
funtion co(fn){
	return function(done){
		let ctx = this;
		let fn = fn.call(ctx);
		let it = null;

		function _next(err, res){
			if(err) res = err;//第二次next的时候，其实就是回调函数返回异步的结果，然后用next赋值
			it = fn.next(res);//value是thunk函数(新的版本是promise)
			if(!it.done){
				it.value(_next) //相当于_next为回调函数，其实没有co的话，就是靠回调运行next的
		}
		_next()
	}
}
```

### 手写一个组件

```
var emitter = {
  // 注册事件
  on: function(event, fn) {
    var handles = this._handles || (this._handles = {}),
      calls = handles[event] || (handles[event] = []);

    // 找到对应名字的栈
    calls.push(fn);

    return this;
  },
  // 解绑事件
  off: function(event, fn) {
    if(!event || !this._handles) this._handles = {};
    if(!this._handles) return;

    var handles = this._handles , calls;

    if (calls = handles[event]) {
      if (!fn) {
        handles[event] = [];
        return this;
      }
      // 找到栈内对应listener 并移除
      for (var i = 0, len = calls.length; i < len; i++) {
        if (fn === calls[i]) {
          calls.splice(i, 1);
          return this;
        }
      }
    }
    return this;
  },
  // 触发事件
  emit: function(event){
    var args = [].slice.call(arguments, 1),
      handles = this._handles, calls;

    if (!handles || !(calls = handles[event])) return this;
    // 触发所有对应名字的listeners
    for (var i = 0, len = calls.length; i < len; i++) {
      calls[i].apply(this, args)
    }
    return this;
  }
}

!function(){
  // 帮助函数
  // ----------

  // 将HTML转换为节点
  function html2node(str){
    var container = document.createElement('div');
    container.innerHTML = str;
    return container.children[0];
  }

  // 赋值属性
  // extend({a:1}, {b:1, a:2}) -> {a:1, b:1}
  function extend(o1, o2){
    for(var i in o2) if(typeof o1[i] === 'undefined'){
      o1[i] = o2[i]
    } 
    return o1
  }




  // Modal
  // -------

  var template = 
  '<div class="m-modal">\
    <div class="modal_align"></div>\
    <div class="modal_wrap animated">\
      <div class="modal_head">标题</div>\
      <div class="modal_body">内容</div>\
      <div class="modal_foot">\
        <a class="confirm" href="#">确认</a>\
        <a class="cancel" href="#">取消</a>\
      </div>\
    </div>\
  </div>';





  function Modal(options){
    options = options || {};
    // 即 div.m-modal 节点
    this.container = this._layout.cloneNode(true);
    // body 用于插入自定义内容
    this.body = this.container.querySelector('.modal_body');
    // 窗体节点，在应用动画时有用
    this.wrap = this.container.querySelector('.modal_wrap');

    // 将options 复制到 组件实例上
    extend(this, options);


    this._initEvent();

  }



  extend(Modal.prototype, {

    _layout: html2node(template),

    setContent: function(content){
      if(!content) return;

      //支持两种字符串结构和DOM节点
      if(content.nodeType === 1){ 

        this.body.innerHTML = 0;
        this.body.appendChild(content);

      }else{

        this.body.innerHTML = content;
      }
    },

    // 显示弹窗
    show: function(content){
      
      if(content) this.setContent(content);

      document.body.appendChild(this.container);
      animateClass(this.wrap, this.animation.enter)


    },

    hide: function(){

      var container = this.container;

      animateClass(this.wrap, this.animation.leave, function(){
        document.body.removeChild(container);
      })
      
    },



    // 初始化事件
    _initEvent: function(){

      this.container.querySelector('.confirm').addEventListener(
        'click', this._onConfirm.bind(this)
      )
      this.container.querySelector('.cancel').addEventListener(
        'click', this._onCancel.bind(this)
      )
    },

    _onConfirm: function(){
      this.emit('confirm')
      this.hide();
    },

    _onCancel: function(){
      this.emit('cancel')
      this.hide();
    }

  })


  // 使用混入Mixin的方式使得Slider具有事件发射器功能
  extend(Modal.prototype, emitter);
  






  //          5.Exports
  // ----------------------------------------------------------------------
  // 暴露API:  Amd || Commonjs  || Global 
  // 支持commonjs
  if (typeof exports === 'object') {
    module.exports = Modal;
    // 支持amd
  } else if (typeof define === 'function' && define.amd) {
    define(function() {
      return Modal
    });
  } else {
    // 直接暴露到全局
    window.Modal = Modal;
  }


}()
```

### GPU 加速

#### 1. 如何开启 GPU 加速

**[1]** 3D 或者透视，transform，perspective

**[2]** 使用加速视频解码的 Vedio

**[3]** webgl 或者 canvas

**[4]** flash 插件

**[5]** 对 opacity、transform、fliter、backdropfilter 应用了 animation 或者 transition（需要是 active 的 animation 或者 transition，当 animation 或者 transition 效果未开始或结束后，提升合成层也会失效）

**[6]** 拥有加速 CSS 过滤器（filter）的元素

**[7]** 有 z-index 比自己低的合成层，导致自己也会提升成合成层

**[8]** will-change 设置为 opacity、transform、top、left、bottom、right（其中 top、left 等需要设置明确的定位属性，如 relative 等）

#### 2. 合成层的管理

**[1]** 提高合成层的 z-index

**[2]** 一个猜想，最小公约父合成层的使用，其子元素很多的话，可以使用常规的 top、left 变化，由于父元素提升成了合成层，因此子元素的变化不会影响到父元素同级元素的定位而引起页面回流

### 简单双向绑定

```
<body>
    <div id="app">
        <input type="text" id="txt">
        <p id="show-txt"></p>
    </div>
    <script>
        var obj = {}
        Object.defineProperty(obj, 'txt', {
            get: function () {
                return obj
            },
            set: function (newValue) {
                document.getElementById('txt').value = newValue
                document.getElementById('show-txt').innerHTML = newValue
            }
        })
        document.addEventListener('keyup', function (e) {
            obj.txt = e.target.value
        })
    </script>
</body>
```

### CommonJS 中的 require/exports 和 ES6 中的 import/export 区别

**[1]** 相同点都是输出可以看成为具有多个属性或者方法的对象

**[2]** ES6 独有 default 这个关键字，输出默认的接口对象

**[3]** require 是按需加载，ES6 是静态加载，编译时能确认模块关系

**[4]** 目前而言，ES6 的 import/export 都会被 babel 处理成 require/exports

**[5]** 前者有自己的命名空间，后者没有

### 项目亮点

#### 1.通信录功能

企业易信通信录初始时候，采用的是类网易体系的通信录规则，也就是组织架构信息透明。后面企业用户反馈，希望提供带权限的通信录功能。

**[1]** 功能介绍

通信录分为两种，一种是网易的权限全透明，一种是只能看到管理员设置权限后的组织。后者逻辑分为：

1、子级可见权限继承成自父级部门，子级是子部门以及直属员工的统称

2、同级子级可以设置只允许部分兄弟子级可见、只对部分兄弟子级不可见以及只对自己子级可见

3、一个员工可以处于多个部门，其权限进行合并后处理，权限有冲突的话，有权限优先级更高。例如员工小明属于A部门下的某部门，也属于B部门的某部门，B部门不允许A部门成员能看到自己，但是小明由于也在B部门，因此AB两个部门都有权限。

**[2]** 技术实现

1、后端提供三个接口，分别是拍平后的组织架构信息、员工详细内容以及员工备注名。三个接口数据都获取后才能进行树结构生成

2、做了双向链表处理，当成员离开群的时候，就能快速定位到父节点，对应处理

3、通讯录数据很大，每次计算都是大笔的开销，因此有必要进行缓存，放进 indexDB 里面

#### 1. 移动端兼容性 —— 原生 select 默认不选的处理

**[1]** 使用原生的理由：一、时间有限，组件模拟不是很好的主意 二、原生的控件其实挺不错。然而，需求里面有 select 默认不选的情况，要用户手动 select 之后才能提交请求

**[2]** 安卓使用 ```select.selectedIndex = -1``` 可以实现该需求，但是 IOS 却失败了。即使使用节点隐藏 select 的默认值（第一项），用户实际是能提交的，因为有值了。假如增加一项提示进 option，会多了一项无意义的 option 项目，也是不可行。网上并没有对应的解决方案。

**[3]** 使用遮罩隐藏选项，设置 CSS 项 ```pointer-events:none;``` 来实现点透，从而可以操作下面的 select 。在 select 上面监控 onBlur 事件，触发后设置 selected 开关为 true 表示已经选择了可以提交，并且隐藏遮罩。

#### 2. 移动端兼容性 —— requestAnimationFrame 的问题

**[1]** requestAnimationFrame 是浏览器将要渲染时候的钩子函数，比 setTimeout 优势的地方在于知道何时要渲染。然而在移动端，由于机器性能，特别是低端安卓手机，requestAnimationFrame 的帧率并没有达到 60 FPS，还是会出现卡顿。

**[2]** 这个时候为了保证动画比较流畅进行，要使用 setTimeout 进行弥补。setTimeout 的延时设置为 60 FPS。假如 requestAnimationFrame 能顺利运行，就清掉 setTimeout 然后再设置新的 setTimeout，否则运行 setTimeout，然后设置开关值让 requestAnimationFrame 不运行主逻辑后再关掉开关，继续 requestAnimationFrame。 

#### 3. postion: sticky 的兼容性

**[1]** 在安卓上不支持的时候，使用 throttle 来包装 scroll 事件运行的逻辑

```
function throttle(func, wait){
	  var wait = wait || 100;
	  var context, args, result;
	  var timeout = null;
	  var previous = 0;
	  var later = function() {
	    previous = +new Date;
	    timeout = null;
	    result = func.apply(context, args);
	    context = args = null;
	  };
	  return function() {
	    var now = + new Date;
	    var remaining = wait - (now - previous);
	    context = this;
	    args = arguments;
	    if (remaining <= 0 || remaining > wait) {
	      clearTimeout(timeout);
	      timeout = null;
	      previous = now;
	      result = func.apply(context, args);
	      context = args = null;
	    } else if (!timeout) {
	      timeout = setTimeout(later, remaining);
	    }
	    return result;
	 };
};
```